//==============================================================================
// This file is a part of the Synkro Framework.
// 
// Copyright (c) Nobody. No rights reserved ;-7
//
// The contents herein is the property of the Mankind.
// Use, distribution and modification of this source code
// is allowed without any permission from the Synkro Project.
// Website: https://synkro.pro Email: mailto:blindharper70@gmail.com
//
// Purpose: Win32 keyboard.
//==============================================================================
#include "config.h"
#include "Win32Keyboard.h"


//------------------------------------------------------------------------------

using namespace synkro::lang;

//------------------------------------------------------------------------------


namespace synkro
{


namespace input
{


static Byte _keys[256] = 
{
	0x00,			// 0x00
	0x00,			// VK_LBUTTON (0x01)
	0x00,			// VK_RBUTTON (0x02)
	0x00,			// VK_CANCEL (0x03)
	0x00,			// VK_MBUTTON (0x04)
	0x00,			// VK_XBUTTON1 (0x05)
	0x00,			// VK_XBUTTON2 (0x06)
	0x00,			// Undefined (0x07)
	0x0E,			// VK_BACK (0x08)
	0x0F,			// VK_TAB (0x09)
	0x00,			// Reserved (0x0A)
	0x00,			// Reserved (0x0B)
	0x00,			// VK_CLEAR (0x0C)
	0x1C,			// VK_RETURN (0x0D)
	0x00,			// Undefined (0x0E)
	0x00,			// Undefined (0x0F)
	0x60,			// VK_SHIFT (0x10)
	0xBA,			// VK_CONTROL (0x11)
	0xF0,			// VK_MENU (0x12)
	0xC5,			// VK_PAUSE (0x13)
	0x3A,			// VK_CAPITAL (0x14)
	0x70,			// VK_KANA (0x15)
	0x00,			// Undefined (0x16)
	0x00,			// VK_JUNJA (0x17)
	0x00,			// VK_FINAL (0x18)
	0x00,			// VK_KANJI (0x19)
	0x00,			// Undefined (0x1A)
	0x01,			// VK_ESCAPE (0x1B)
	0x79,			// VK_CONVERT (0x1C)
	0x7B,			// VK_NOCONVERT (0x1D)
	0x00,			// VK_ACCEPT (0x1E)
	0x00,			// VK_MODECHANGE (0x1F)
	0x39,			// VK_SPACE (0x20)
	0xC9,			// VK_PRIOR (0x21)
	0xD1,			// VK_NEXT (0x22)
	0xCF,			// VK_END (0x23)
	0xC7,			// VK_HOME (0x24)
	0xCB,			// VK_LEFT (0x25)
	0xC8,			// VK_UP (0x26)
	0xCD,			// VK_RIGHT (0x27)
	0xD0,			// VK_DOWN (0x28)
	0x00,			// VK_SELECT (0x29)
	0x00,			// VK_PRINT (0x2A)
	0x00,			// VK_EXECUTE (0x2B)
	0xB7,			// VK_SNAPSHOT (0x2C)
	0xD2,			// VK_INSERT (0x2D)
	0xD3,			// VK_DELETE (0x2E)
	0x00,			// VK_HELP (0x2F)
	0x0B,			// 0 key (0x30)
	0x02,			// 1 key (0x31)
	0x03,			// 2 key (0x32)
	0x04,			// 3 key (0x33)
	0x05,			// 4 key (0x34)
	0x06,			// 5 key (0x35)
	0x07,			// 6 key (0x36)
	0x08,			// 7 key (0x37)
	0x09,			// 8 key (0x38)
	0x0A,			// 9 key (0x39)
	0x00,			// Undefined (0x3A)
	0x00,			// Undefined (0x3B)
	0x00,			// Undefined (0x3C)
	0x00,			// Undefined (0x3D)
	0x00,			// Undefined (0x3E)
	0x00,			// Undefined (0x3F)
	0x00,			// Undefined (0x40)
	0x1E,			// A key (0x41)
	0x30,			// B key (0x42)
	0x2E,			// C key (0x43)
	0x20,			// D key (0x44)
	0x12,			// E key (0x45)
	0x21,			// F key (0x46)
	0x22,			// G key (0x47)
	0x23,			// H key (0x48)
	0x17,			// I key (0x49)
	0x24,			// J key (0x4A)
	0x25,			// K key (0x4B)
	0x26,			// L key (0x4C)
	0x32,			// M key (0x4D)
	0x31,			// N key (0x4E)
	0x18,			// O key (0x4F)
	0x19,			// P key (0x50)
	0x10,			// Q key (0x51)
	0x13,			// R key (0x52)
	0x1F,			// S key (0x53)
	0x14,			// T key (0x54)
	0x16,			// U key (0x55)
	0x2F,			// V key (0x56)
	0x11,			// W key (0x57)
	0x2D,			// X key (0x58)
	0x15,			// Y key (0x59)
	0x2C,			// Z key (0x5A)
	0xDB,			// VK_LWIN (0x5B)
	0xDC,			// VK_RWIN (0x5C)
	0xDD,			// VK_APPS (0x5D)
	0x00,			// Reserved (0x5E)
	0xDF,			// VK_SLEEP (0x5F)
	0x52,			// VK_NUMPAD0 (0x60)
	0x4F,			// VK_NUMPAD1 (0x61)
	0x50,			// VK_NUMPAD2 (0x62)
	0x51,			// VK_NUMPAD3 (0x63)
	0x4B,			// VK_NUMPAD4 (0x64)
	0x4C,			// VK_NUMPAD5 (0x65)
	0x4D,			// VK_NUMPAD6 (0x66)
	0x47,			// VK_NUMPAD7 (0x67)
	0x48,			// VK_NUMPAD8 (0x68)
	0x49,			// VK_NUMPAD9 (0x69)
	0x37,			// VK_MULTIPLY (0x6A)
	0x4E,			// VK_ADD (0x6B)
	0x00,			// VK_SEPARATOR (0x6C)
	0x4A,			// VK_SUBTRACT (0x6D)
	0x53,			// VK_DECIMAL (0x6E)
	0xB5,			// VK_DIVIDE (0x6F)
	0x3B,			// VK_F1 (0x70)
	0x3C,			// VK_F2 (0x71)
	0x3D,			// VK_F3 (0x72)
	0x3E,			// VK_F4 (0x73)
	0x3F,			// VK_F5 (0x74)
	0x40,			// VK_F6 (0x75)
	0x41,			// VK_F7 (0x76)
	0x42,			// VK_F8 (0x77)
	0x43,			// VK_F9 (0x78)
	0x44,			// VK_F10 (0x79)
	0x57,			// VK_F11 (0x7A)
	0x58,			// VK_F12 (0x7B)
	0x64,			// VK_F13 (0x7C)
	0x65,			// VK_F14 (0x7D)
	0x66,			// VK_F15 (0x7E)
	0x00,			// VK_F16 (0x7F)
	0x00,			// VK_F17 (0x80)
	0x00,			// VK_F18 (0x81)
	0x00,			// VK_F19 (0x82)
	0x00,			// VK_F20 (0x83)
	0x00,			// VK_F21 (0x84)
	0x00,			// VK_F22 (0x85)
	0x00,			// VK_F23 (0x86)
	0x00,			// VK_F24 (0x87)
	0x00,			// Unassigned (0x88)
	0x00,			// Unassigned (0x89)
	0x00,			// Unassigned (0x8A)
	0x00,			// Unassigned (0x8B)
	0x00,			// Unassigned (0x8C)
	0x00,			// Unassigned (0x8D)
	0x00,			// Unassigned (0x8E)
	0x00,			// Unassigned (0x8F)
	0x45,			// VK_NUMLOCK (0x90)
	0x46,			// VK_SCROLL (0x91)
	0x00,			// OEM specific (0x92)
	0x00,			// OEM specific (0x93)
	0x00,			// OEM specific (0x94)
	0x00,			// OEM specific (0x95)
	0x00,			// OEM specific (0x96)
	0x00,			// Unassigned (0x97)
	0x00,			// Unassigned (0x98)
	0x00,			// Unassigned (0x99)
	0x00,			// Unassigned (0x9A)
	0x00,			// Unassigned (0x9B)
	0x00,			// Unassigned (0x9C)
	0x00,			// Unassigned (0x9D)
	0x00,			// Unassigned (0x9E)
	0x00,			// Unassigned (0x9F)
	0x2A,			// VK_LSHIFT (0xA0)
	0x36,			// VK_RSHIFT (0xA1)
	0x1D,			// VK_LCONTROL (0xA2)
	0x9D,			// VK_RCONTROL (0xA3)
	0x38,			// VK_LMENU (0xA4)
	0xB8,			// VK_RMENU (0xA5)
	0xEA,			// VK_BROWSER_BACK (0xA6)
	0xE9,			// VK_BROWSER_FORWARD (0xA7)
	0xE7,			// VK_BROWSER_REFRESH (0xA8)
	0xE8,			// VK_BROWSER_STOP (0xA9)
	0xE5,			// VK_BROWSER_SEARCH (0xAA)
	0xE6,			// VK_BROWSER_FAVORITES (0xAB)
	0xB2,			// VK_BROWSER_HOME (0xAC)
	0xA0,			// VK_VOLUME_MUTE (0xAD)
	0xAE,			// VK_VOLUME_DOWN (0xAE)
	0xB0,			// VK_VOLUME_UP (0xAF)
	0x99,			// VK_MEDIA_NEXT_TRACK (0xB0)
	0x90,			// VK_MEDIA_PREV_TRACK (0xB1)
	0xA4,			// VK_MEDIA_STOP (0xB2)
	0xA2,			// VK_MEDIA_PLAY_PAUSE (0xB3)
	0xEC,			// VK_LAUNCH_MAIL (0xB4)
	0xED,			// VK_LAUNCH_MEDIA_SELECT (0xB5)
	0x00,			// VK_LAUNCH_APP1 (0xB6)
	0x00,			// VK_LAUNCH_APP2 (0xB7)
	0x00,			// Reserved (0xB8)
	0x00,			// Reserved (0xB9)
	0x00,			// VK_OEM_1 (0xBA)
	0x0D,			// VK_OEM_PLUS (0xBB)
	0x33,			// VK_OEM_COMMA (0xBC)
	0x0C,			// VK_OEM_MINUS (0xBD)
	0x34,			// VK_OEM_PERIOD (0xBE)
	0x00,			// VK_OEM_2 (0xBF)
	0x29,			// VK_OEM_3 (0xC0)
	0x00,			// Reserved (0xC1)
	0x00,			// Reserved (0xC2)
	0x00,			// Reserved (0xC3)
	0x00,			// Reserved (0xC4)
	0x00,			// Reserved (0xC5)
	0x00,			// Reserved (0xC6)
	0x00,			// Reserved (0xC7)
	0x00,			// Reserved (0xC8)
	0x00,			// Reserved (0xC9)
	0x00,			// Reserved (0xCA)
	0x00,			// Reserved (0xCB)
	0x00,			// Reserved (0xCC)
	0x00,			// Reserved (0xCD)
	0x00,			// Reserved (0xCE)
	0x00,			// Reserved (0xCF)
	0x00,			// Reserved (0xD0)
	0x00,			// Reserved (0xD1)
	0x00,			// Reserved (0xD2)
	0x00,			// Reserved (0xD3)
	0x00,			// Reserved (0xD4)
	0x00,			// Reserved (0xD5)
	0x00,			// Reserved (0xD6)
	0x00,			// Reserved (0xD7)
	0x00,			// Unassigned (0xD8)
	0x00,			// Unassigned (0xD9)
	0x00,			// Unassigned (0xDA)
	0x00,			// VK_OEM_4 (0xDB)
	0x00,			// VK_OEM_5 (0xDC)
	0x00,			// VK_OEM_6 (0xDD)
	0x00,			// VK_OEM_7 (0xDE)
	0x00,			// VK_OEM_8 (0xDF)
	0x00,			// Reserved (0xE0)
	0x00,			// OEM specific (0xE1)
	0x56,			// VK_OEM_102 (0xE2)
	0x00,			// OEM specific (0xE3)
	0x00,			// OEM specific (0xE4)
	0x00,			// VK_PROCESSKEY (E5)
	0x00,			// OEM specific (0xE6)
	0x00,			// VK_PACKET (0xE7)
	0x00,			// Unassigned (0xE8)
	0x00,			// OEM specific (0xE9)
	0x00,			// OEM specific (0xEA)
	0x00,			// OEM specific (0xEB)
	0x00,			// OEM specific (0xEC)
	0x00,			// OEM specific (0xED)
	0x00,			// OEM specific (0xEE)
	0x00,			// OEM specific (0xEF)
	0x00,			// OEM specific (0xF0)
	0x00,			// OEM specific (0xF1)
	0x00,			// OEM specific (0xF2)
	0x00,			// OEM specific (0xF3)
	0x00,			// OEM specific (0xF4)
	0x00,			// OEM specific (0xF5)
	0x00,			// VK_ATTN (0xF6)
	0x00,			// VK_CRSEL (0xF7)
	0x00,			// VK_EXSEL (0xF8)
	0x00,			// VK_EREOF (0xF9)
	0x00,			// VK_PLAY (0xFA)
	0x00,			// VK_ZOOM (0xFB)
	0x00,			// VK_NONAME (0xFC)
	0x00,			// VK_PA1 (0xFD)
	0x00,			// VK_OEM_CLEAR (0xFE)
	0x00,			// 0xFF
};


Win32Keyboard::Win32Keyboard( const KeyboardDesc& desc ) :
	KeyboardImpl<IKeyboard>( desc )
{
}

Bool Win32Keyboard::Update( Double delta )
{
	Zero( _state.Keys, sizeof(_state.Keys) );
	return ( ::GetKeyboardState(_state.Keys) == TRUE );
}

Bool Win32Keyboard::IsKeyDown( const Key& key ) const
{
	const UInt k = key;
	const UINT vk = ::MapVirtualKey( k, 1 );
	return ((_state.Keys[vk] & 0x80) != 0);
}

Key Win32Keyboard::ToKey( Byte code ) const
{
	return (Key)_keys[code];
}

char Win32Keyboard::ToChar( Byte code, Bool shift ) const
{
	static HKL layout = ::GetKeyboardLayout( 0 );
	static BYTE state[256] = {};

	if ( ::GetKeyboardState(state) == FALSE )
		return 0;

	state[VK_SHIFT] = shift ? 0xff : 0x00;
	::SetKeyboardState( state );

	WORD result;
	const UINT vk = ::MapVirtualKeyExA( code, 1, layout );
	const int ret = ::ToAsciiEx( vk, code, state, &result, 0, layout );
	return (ret != 0) ? (char)(result & 0xff) : (char)0;
}


} // input


} // synkro
